/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GoingUpProjectsInterface extends utils.Interface {
  functions: {
    "acceptProjectInvitation(uint256)": FunctionFragment;
    "activate(uint256)": FunctionFragment;
    "addMemberPrice()": FunctionFragment;
    "addMemberPriceOverrides(address)": FunctionFragment;
    "admins(address)": FunctionFragment;
    "create(string,string,uint256,uint256,string,string,bool)": FunctionFragment;
    "deactivate(uint256)": FunctionFragment;
    "disinviteMember(uint256,uint256)": FunctionFragment;
    "extraData(uint256,string)": FunctionFragment;
    "freeMembers()": FunctionFragment;
    "getPendingInvites(uint256)": FunctionFragment;
    "getPendingInvitesByAddress(address)": FunctionFragment;
    "getProjectMembers(uint256)": FunctionFragment;
    "getProjectsByAddress(address)": FunctionFragment;
    "inviteMember(uint256,address,string,string,string)": FunctionFragment;
    "leaveProject(uint256,string)": FunctionFragment;
    "manuallyAddMember(uint256,address,string,string,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "projectMemberStorage(uint256)": FunctionFragment;
    "projects(uint256)": FunctionFragment;
    "removeMember(uint256,uint256,string)": FunctionFragment;
    "setAddMemberPrice(uint256)": FunctionFragment;
    "setAddMemberPriceOverride(address,uint256)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setFreeMembers(uint256)": FunctionFragment;
    "setMemberGoalAsAchieved(uint256,uint256)": FunctionFragment;
    "setMemberRewardAsVerified(uint256,uint256)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setProjectExtraData(uint256,string,string)": FunctionFragment;
    "setProjectMemberExtraData(uint256,uint256,string)": FunctionFragment;
    "setProjectPrivate(uint256)": FunctionFragment;
    "setProjectPublic(uint256)": FunctionFragment;
    "submitProjectReview(uint256,int8,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferProjectOwnership(uint256,address)": FunctionFragment;
    "update(uint256,string,string,uint256,uint256,string,string,bool)": FunctionFragment;
    "withdrawERC1155(address,uint256,uint256,bytes)": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProjectInvitation"
      | "activate"
      | "addMemberPrice"
      | "addMemberPriceOverrides"
      | "admins"
      | "create"
      | "deactivate"
      | "disinviteMember"
      | "extraData"
      | "freeMembers"
      | "getPendingInvites"
      | "getPendingInvitesByAddress"
      | "getProjectMembers"
      | "getProjectsByAddress"
      | "inviteMember"
      | "leaveProject"
      | "manuallyAddMember"
      | "owner"
      | "price"
      | "projectMemberStorage"
      | "projects"
      | "removeMember"
      | "setAddMemberPrice"
      | "setAddMemberPriceOverride"
      | "setAdmin"
      | "setFreeMembers"
      | "setMemberGoalAsAchieved"
      | "setMemberRewardAsVerified"
      | "setPrice"
      | "setProjectExtraData"
      | "setProjectMemberExtraData"
      | "setProjectPrivate"
      | "setProjectPublic"
      | "submitProjectReview"
      | "transferOwnership"
      | "transferProjectOwnership"
      | "update"
      | "withdrawERC1155"
      | "withdrawERC20"
      | "withdrawERC721"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProjectInvitation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMemberPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMemberPriceOverrides",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disinviteMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extraData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingInvites",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingInvitesByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectMembers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "inviteMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveProject",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manuallyAddMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectMemberStorage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddMemberPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddMemberPriceOverride",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeMembers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemberGoalAsAchieved",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemberRewardAsVerified",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectExtraData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectMemberExtraData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectPrivate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectPublic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProjectReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProjectOwnership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProjectInvitation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMemberPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMemberPriceOverrides",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disinviteMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingInvites",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingInvitesByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inviteMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manuallyAddMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectMemberStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddMemberPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddMemberPriceOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFreeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemberGoalAsAchieved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemberRewardAsVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProjectExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectMemberExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectPrivate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProjectReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProjectOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "AcceptProjectInvitation(uint256,address,uint256)": EventFragment;
    "Activate(uint256,address)": EventFragment;
    "AddMemberPriceChanged(address,uint256)": EventFragment;
    "AddMemberPriceOverrideSet(address,address,uint256)": EventFragment;
    "Create(address,uint256)": EventFragment;
    "Deactivate(uint256,address)": EventFragment;
    "DisinviteMember(uint256,address,uint256)": EventFragment;
    "FreeMembersChanged(address,uint256)": EventFragment;
    "InviteMember(uint256,address,address)": EventFragment;
    "LeaveProject(uint256,uint256,string)": EventFragment;
    "ManuallyAddMember(uint256,address,address,uint256)": EventFragment;
    "RemoveMember(uint256,address,uint256,string)": EventFragment;
    "SetMemberGoalAsAchieved(uint256,address,uint256)": EventFragment;
    "SetMemberRewardAsVerified(uint256,address,uint256)": EventFragment;
    "SetProjectExtraData(uint256,address,string,string)": EventFragment;
    "SetProjectMemberExtraData(uint256,address,uint256)": EventFragment;
    "SetProjectPrivate(uint256,address)": EventFragment;
    "SetProjectPublic(uint256,address)": EventFragment;
    "SubmitProjectReview(uint256,address,int8,string)": EventFragment;
    "TransferProjectOwnership(uint256,address,address)": EventFragment;
    "Update(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptProjectInvitation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Activate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddMemberPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddMemberPriceOverrideSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deactivate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisinviteMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreeMembersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InviteMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManuallyAddMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMemberGoalAsAchieved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMemberRewardAsVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProjectExtraData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProjectMemberExtraData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProjectPrivate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProjectPublic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitProjectReview"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferProjectOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
}

export interface AcceptProjectInvitationEventObject {
  projectId: BigNumber;
  member: string;
  memberRecordId: BigNumber;
}
export type AcceptProjectInvitationEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AcceptProjectInvitationEventObject
>;

export type AcceptProjectInvitationEventFilter =
  TypedEventFilter<AcceptProjectInvitationEvent>;

export interface ActivateEventObject {
  projectId: BigNumber;
  activatedBy: string;
}
export type ActivateEvent = TypedEvent<
  [BigNumber, string],
  ActivateEventObject
>;

export type ActivateEventFilter = TypedEventFilter<ActivateEvent>;

export interface AddMemberPriceChangedEventObject {
  changedBy: string;
  newAddMemberPrice: BigNumber;
}
export type AddMemberPriceChangedEvent = TypedEvent<
  [string, BigNumber],
  AddMemberPriceChangedEventObject
>;

export type AddMemberPriceChangedEventFilter =
  TypedEventFilter<AddMemberPriceChangedEvent>;

export interface AddMemberPriceOverrideSetEventObject {
  setBy: string;
  targetAddress: string;
  overridePrice: BigNumber;
}
export type AddMemberPriceOverrideSetEvent = TypedEvent<
  [string, string, BigNumber],
  AddMemberPriceOverrideSetEventObject
>;

export type AddMemberPriceOverrideSetEventFilter =
  TypedEventFilter<AddMemberPriceOverrideSetEvent>;

export interface CreateEventObject {
  creator: string;
  projectId: BigNumber;
}
export type CreateEvent = TypedEvent<[string, BigNumber], CreateEventObject>;

export type CreateEventFilter = TypedEventFilter<CreateEvent>;

export interface DeactivateEventObject {
  projectId: BigNumber;
  deactivatedBy: string;
}
export type DeactivateEvent = TypedEvent<
  [BigNumber, string],
  DeactivateEventObject
>;

export type DeactivateEventFilter = TypedEventFilter<DeactivateEvent>;

export interface DisinviteMemberEventObject {
  projectId: BigNumber;
  by: string;
  memberRecordId: BigNumber;
}
export type DisinviteMemberEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DisinviteMemberEventObject
>;

export type DisinviteMemberEventFilter = TypedEventFilter<DisinviteMemberEvent>;

export interface FreeMembersChangedEventObject {
  changedBy: string;
  newFreeMembers: BigNumber;
}
export type FreeMembersChangedEvent = TypedEvent<
  [string, BigNumber],
  FreeMembersChangedEventObject
>;

export type FreeMembersChangedEventFilter =
  TypedEventFilter<FreeMembersChangedEvent>;

export interface InviteMemberEventObject {
  projectId: BigNumber;
  from: string;
  to: string;
}
export type InviteMemberEvent = TypedEvent<
  [BigNumber, string, string],
  InviteMemberEventObject
>;

export type InviteMemberEventFilter = TypedEventFilter<InviteMemberEvent>;

export interface LeaveProjectEventObject {
  projectId: BigNumber;
  memberRecordId: BigNumber;
  reason: string;
}
export type LeaveProjectEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LeaveProjectEventObject
>;

export type LeaveProjectEventFilter = TypedEventFilter<LeaveProjectEvent>;

export interface ManuallyAddMemberEventObject {
  projectId: BigNumber;
  addedBy: string;
  member: string;
  memberRecordId: BigNumber;
}
export type ManuallyAddMemberEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ManuallyAddMemberEventObject
>;

export type ManuallyAddMemberEventFilter =
  TypedEventFilter<ManuallyAddMemberEvent>;

export interface RemoveMemberEventObject {
  projectId: BigNumber;
  removedBy: string;
  memberRecordId: BigNumber;
  reason: string;
}
export type RemoveMemberEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  RemoveMemberEventObject
>;

export type RemoveMemberEventFilter = TypedEventFilter<RemoveMemberEvent>;

export interface SetMemberGoalAsAchievedEventObject {
  projectId: BigNumber;
  setAsAchievedBy: string;
  memberRecordId: BigNumber;
}
export type SetMemberGoalAsAchievedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetMemberGoalAsAchievedEventObject
>;

export type SetMemberGoalAsAchievedEventFilter =
  TypedEventFilter<SetMemberGoalAsAchievedEvent>;

export interface SetMemberRewardAsVerifiedEventObject {
  projectId: BigNumber;
  setAsVerifiedBy: string;
  memberRecordId: BigNumber;
}
export type SetMemberRewardAsVerifiedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetMemberRewardAsVerifiedEventObject
>;

export type SetMemberRewardAsVerifiedEventFilter =
  TypedEventFilter<SetMemberRewardAsVerifiedEvent>;

export interface SetProjectExtraDataEventObject {
  projectId: BigNumber;
  setBy: string;
  key: string;
  value: string;
}
export type SetProjectExtraDataEvent = TypedEvent<
  [BigNumber, string, string, string],
  SetProjectExtraDataEventObject
>;

export type SetProjectExtraDataEventFilter =
  TypedEventFilter<SetProjectExtraDataEvent>;

export interface SetProjectMemberExtraDataEventObject {
  projectId: BigNumber;
  setBy: string;
  memberRecordId: BigNumber;
}
export type SetProjectMemberExtraDataEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetProjectMemberExtraDataEventObject
>;

export type SetProjectMemberExtraDataEventFilter =
  TypedEventFilter<SetProjectMemberExtraDataEvent>;

export interface SetProjectPrivateEventObject {
  projectId: BigNumber;
  setBy: string;
}
export type SetProjectPrivateEvent = TypedEvent<
  [BigNumber, string],
  SetProjectPrivateEventObject
>;

export type SetProjectPrivateEventFilter =
  TypedEventFilter<SetProjectPrivateEvent>;

export interface SetProjectPublicEventObject {
  projectId: BigNumber;
  setBy: string;
}
export type SetProjectPublicEvent = TypedEvent<
  [BigNumber, string],
  SetProjectPublicEventObject
>;

export type SetProjectPublicEventFilter =
  TypedEventFilter<SetProjectPublicEvent>;

export interface SubmitProjectReviewEventObject {
  projectId: BigNumber;
  reviewedBy: string;
  score: number;
  comments: string;
}
export type SubmitProjectReviewEvent = TypedEvent<
  [BigNumber, string, number, string],
  SubmitProjectReviewEventObject
>;

export type SubmitProjectReviewEventFilter =
  TypedEventFilter<SubmitProjectReviewEvent>;

export interface TransferProjectOwnershipEventObject {
  projectId: BigNumber;
  from: string;
  to: string;
}
export type TransferProjectOwnershipEvent = TypedEvent<
  [BigNumber, string, string],
  TransferProjectOwnershipEventObject
>;

export type TransferProjectOwnershipEventFilter =
  TypedEventFilter<TransferProjectOwnershipEvent>;

export interface UpdateEventObject {
  updater: string;
  projectId: BigNumber;
}
export type UpdateEvent = TypedEvent<[string, BigNumber], UpdateEventObject>;

export type UpdateEventFilter = TypedEventFilter<UpdateEvent>;

export interface GoingUpProjects extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoingUpProjectsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProjectInvitation(
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMemberPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMemberPriceOverrides(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disinviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    freeMembers(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingInvites(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPendingInvitesByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getProjectMembers(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getProjectsByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    inviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveProject(
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    manuallyAddMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    projectMemberStorage(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        string
      ] & {
        id: BigNumber;
        projectId: BigNumber;
        member: string;
        role: string;
        goal: string;
        rewardData: string;
        goalAchieved: boolean;
        rewardVerified: boolean;
        extraData: string;
      }
    >;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        boolean
      ] & {
        id: BigNumber;
        name: string;
        description: string;
        started: BigNumber;
        ended: BigNumber;
        primaryUrl: string;
        tags: string;
        owner: string;
        active: boolean;
        isPrivate: boolean;
      }
    >;

    removeMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddMemberPrice(
      newAddMemberPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddMemberPriceOverride(
      targetAddress: PromiseOrValue<string>,
      overridePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      targetAddress: PromiseOrValue<string>,
      isAdmin: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFreeMembers(
      newFreeMembers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemberGoalAsAchieved(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemberRewardAsVerified(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectMemberExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectPrivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectPublic(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProjectReview(
      projectId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      comments: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferProjectOwnership(
      projectId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      projectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProjectInvitation(
    memberRecordId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activate(
    projectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMemberPrice(overrides?: CallOverrides): Promise<BigNumber>;

  addMemberPriceOverrides(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  admins(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    started: PromiseOrValue<BigNumberish>,
    ended: PromiseOrValue<BigNumberish>,
    primaryUrl: PromiseOrValue<string>,
    tags: PromiseOrValue<string>,
    isPrivate: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivate(
    projectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disinviteMember(
    projectId: PromiseOrValue<BigNumberish>,
    memberRecordId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extraData(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  freeMembers(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingInvites(
    projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPendingInvitesByAddress(
    member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProjectMembers(
    projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProjectsByAddress(
    member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  inviteMember(
    projectId: PromiseOrValue<BigNumberish>,
    member: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    goal: PromiseOrValue<string>,
    rewardData: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveProject(
    memberRecordId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  manuallyAddMember(
    projectId: PromiseOrValue<BigNumberish>,
    member: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    goal: PromiseOrValue<string>,
    rewardData: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  projectMemberStorage(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      boolean,
      boolean,
      string
    ] & {
      id: BigNumber;
      projectId: BigNumber;
      member: string;
      role: string;
      goal: string;
      rewardData: string;
      goalAchieved: boolean;
      rewardVerified: boolean;
      extraData: string;
    }
  >;

  projects(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      boolean,
      boolean
    ] & {
      id: BigNumber;
      name: string;
      description: string;
      started: BigNumber;
      ended: BigNumber;
      primaryUrl: string;
      tags: string;
      owner: string;
      active: boolean;
      isPrivate: boolean;
    }
  >;

  removeMember(
    projectId: PromiseOrValue<BigNumberish>,
    memberRecordId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddMemberPrice(
    newAddMemberPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddMemberPriceOverride(
    targetAddress: PromiseOrValue<string>,
    overridePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    targetAddress: PromiseOrValue<string>,
    isAdmin: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFreeMembers(
    newFreeMembers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemberGoalAsAchieved(
    projectId: PromiseOrValue<BigNumberish>,
    memberRecordId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemberRewardAsVerified(
    projectId: PromiseOrValue<BigNumberish>,
    memberRecordId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectExtraData(
    projectId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectMemberExtraData(
    projectId: PromiseOrValue<BigNumberish>,
    memberRecordId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectPrivate(
    projectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectPublic(
    projectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProjectReview(
    projectId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    comments: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferProjectOwnership(
    projectId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    projectId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    started: PromiseOrValue<BigNumberish>,
    ended: PromiseOrValue<BigNumberish>,
    primaryUrl: PromiseOrValue<string>,
    tags: PromiseOrValue<string>,
    isPrivate: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    tokenAddress: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    tokenAddress: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProjectInvitation(
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    activate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMemberPrice(overrides?: CallOverrides): Promise<BigNumber>;

    addMemberPriceOverrides(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disinviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    freeMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingInvites(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPendingInvitesByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProjectMembers(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProjectsByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    inviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    leaveProject(
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    manuallyAddMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    projectMemberStorage(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        string
      ] & {
        id: BigNumber;
        projectId: BigNumber;
        member: string;
        role: string;
        goal: string;
        rewardData: string;
        goalAchieved: boolean;
        rewardVerified: boolean;
        extraData: string;
      }
    >;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        boolean
      ] & {
        id: BigNumber;
        name: string;
        description: string;
        started: BigNumber;
        ended: BigNumber;
        primaryUrl: string;
        tags: string;
        owner: string;
        active: boolean;
        isPrivate: boolean;
      }
    >;

    removeMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddMemberPrice(
      newAddMemberPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddMemberPriceOverride(
      targetAddress: PromiseOrValue<string>,
      overridePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      targetAddress: PromiseOrValue<string>,
      isAdmin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreeMembers(
      newFreeMembers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemberGoalAsAchieved(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemberRewardAsVerified(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectMemberExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectPrivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectPublic(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProjectReview(
      projectId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      comments: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferProjectOwnership(
      projectId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      projectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AcceptProjectInvitation(uint256,address,uint256)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      member?: null,
      memberRecordId?: null
    ): AcceptProjectInvitationEventFilter;
    AcceptProjectInvitation(
      projectId?: PromiseOrValue<BigNumberish> | null,
      member?: null,
      memberRecordId?: null
    ): AcceptProjectInvitationEventFilter;

    "Activate(uint256,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      activatedBy?: null
    ): ActivateEventFilter;
    Activate(
      projectId?: PromiseOrValue<BigNumberish> | null,
      activatedBy?: null
    ): ActivateEventFilter;

    "AddMemberPriceChanged(address,uint256)"(
      changedBy?: null,
      newAddMemberPrice?: null
    ): AddMemberPriceChangedEventFilter;
    AddMemberPriceChanged(
      changedBy?: null,
      newAddMemberPrice?: null
    ): AddMemberPriceChangedEventFilter;

    "AddMemberPriceOverrideSet(address,address,uint256)"(
      setBy?: null,
      targetAddress?: null,
      overridePrice?: null
    ): AddMemberPriceOverrideSetEventFilter;
    AddMemberPriceOverrideSet(
      setBy?: null,
      targetAddress?: null,
      overridePrice?: null
    ): AddMemberPriceOverrideSetEventFilter;

    "Create(address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      projectId?: null
    ): CreateEventFilter;
    Create(
      creator?: PromiseOrValue<string> | null,
      projectId?: null
    ): CreateEventFilter;

    "Deactivate(uint256,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      deactivatedBy?: null
    ): DeactivateEventFilter;
    Deactivate(
      projectId?: PromiseOrValue<BigNumberish> | null,
      deactivatedBy?: null
    ): DeactivateEventFilter;

    "DisinviteMember(uint256,address,uint256)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      by?: null,
      memberRecordId?: null
    ): DisinviteMemberEventFilter;
    DisinviteMember(
      projectId?: PromiseOrValue<BigNumberish> | null,
      by?: null,
      memberRecordId?: null
    ): DisinviteMemberEventFilter;

    "FreeMembersChanged(address,uint256)"(
      changedBy?: null,
      newFreeMembers?: null
    ): FreeMembersChangedEventFilter;
    FreeMembersChanged(
      changedBy?: null,
      newFreeMembers?: null
    ): FreeMembersChangedEventFilter;

    "InviteMember(uint256,address,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): InviteMemberEventFilter;
    InviteMember(
      projectId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): InviteMemberEventFilter;

    "LeaveProject(uint256,uint256,string)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      memberRecordId?: null,
      reason?: null
    ): LeaveProjectEventFilter;
    LeaveProject(
      projectId?: PromiseOrValue<BigNumberish> | null,
      memberRecordId?: null,
      reason?: null
    ): LeaveProjectEventFilter;

    "ManuallyAddMember(uint256,address,address,uint256)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      addedBy?: null,
      member?: null,
      memberRecordId?: null
    ): ManuallyAddMemberEventFilter;
    ManuallyAddMember(
      projectId?: PromiseOrValue<BigNumberish> | null,
      addedBy?: null,
      member?: null,
      memberRecordId?: null
    ): ManuallyAddMemberEventFilter;

    "RemoveMember(uint256,address,uint256,string)"(
      projectId?: null,
      removedBy?: null,
      memberRecordId?: null,
      reason?: null
    ): RemoveMemberEventFilter;
    RemoveMember(
      projectId?: null,
      removedBy?: null,
      memberRecordId?: null,
      reason?: null
    ): RemoveMemberEventFilter;

    "SetMemberGoalAsAchieved(uint256,address,uint256)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setAsAchievedBy?: null,
      memberRecordId?: null
    ): SetMemberGoalAsAchievedEventFilter;
    SetMemberGoalAsAchieved(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setAsAchievedBy?: null,
      memberRecordId?: null
    ): SetMemberGoalAsAchievedEventFilter;

    "SetMemberRewardAsVerified(uint256,address,uint256)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setAsVerifiedBy?: null,
      memberRecordId?: null
    ): SetMemberRewardAsVerifiedEventFilter;
    SetMemberRewardAsVerified(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setAsVerifiedBy?: null,
      memberRecordId?: null
    ): SetMemberRewardAsVerifiedEventFilter;

    "SetProjectExtraData(uint256,address,string,string)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null,
      key?: null,
      value?: null
    ): SetProjectExtraDataEventFilter;
    SetProjectExtraData(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null,
      key?: null,
      value?: null
    ): SetProjectExtraDataEventFilter;

    "SetProjectMemberExtraData(uint256,address,uint256)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null,
      memberRecordId?: null
    ): SetProjectMemberExtraDataEventFilter;
    SetProjectMemberExtraData(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null,
      memberRecordId?: null
    ): SetProjectMemberExtraDataEventFilter;

    "SetProjectPrivate(uint256,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null
    ): SetProjectPrivateEventFilter;
    SetProjectPrivate(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null
    ): SetProjectPrivateEventFilter;

    "SetProjectPublic(uint256,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null
    ): SetProjectPublicEventFilter;
    SetProjectPublic(
      projectId?: PromiseOrValue<BigNumberish> | null,
      setBy?: null
    ): SetProjectPublicEventFilter;

    "SubmitProjectReview(uint256,address,int8,string)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      reviewedBy?: null,
      score?: null,
      comments?: null
    ): SubmitProjectReviewEventFilter;
    SubmitProjectReview(
      projectId?: PromiseOrValue<BigNumberish> | null,
      reviewedBy?: null,
      score?: null,
      comments?: null
    ): SubmitProjectReviewEventFilter;

    "TransferProjectOwnership(uint256,address,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): TransferProjectOwnershipEventFilter;
    TransferProjectOwnership(
      projectId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): TransferProjectOwnershipEventFilter;

    "Update(address,uint256)"(
      updater?: PromiseOrValue<string> | null,
      projectId?: null
    ): UpdateEventFilter;
    Update(
      updater?: PromiseOrValue<string> | null,
      projectId?: null
    ): UpdateEventFilter;
  };

  estimateGas: {
    acceptProjectInvitation(
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMemberPrice(overrides?: CallOverrides): Promise<BigNumber>;

    addMemberPriceOverrides(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disinviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingInvites(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingInvitesByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectMembers(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectsByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveProject(
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    manuallyAddMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    projectMemberStorage(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddMemberPrice(
      newAddMemberPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddMemberPriceOverride(
      targetAddress: PromiseOrValue<string>,
      overridePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      targetAddress: PromiseOrValue<string>,
      isAdmin: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFreeMembers(
      newFreeMembers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemberGoalAsAchieved(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemberRewardAsVerified(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectMemberExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectPrivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectPublic(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProjectReview(
      projectId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      comments: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferProjectOwnership(
      projectId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      projectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProjectInvitation(
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMemberPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMemberPriceOverrides(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disinviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingInvites(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingInvitesByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectMembers(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectsByAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inviteMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveProject(
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    manuallyAddMember(
      projectId: PromiseOrValue<BigNumberish>,
      member: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      goal: PromiseOrValue<string>,
      rewardData: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectMemberStorage(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddMemberPrice(
      newAddMemberPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddMemberPriceOverride(
      targetAddress: PromiseOrValue<string>,
      overridePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      targetAddress: PromiseOrValue<string>,
      isAdmin: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFreeMembers(
      newFreeMembers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemberGoalAsAchieved(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemberRewardAsVerified(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectMemberExtraData(
      projectId: PromiseOrValue<BigNumberish>,
      memberRecordId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectPrivate(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectPublic(
      projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProjectReview(
      projectId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      comments: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferProjectOwnership(
      projectId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      projectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      started: PromiseOrValue<BigNumberish>,
      ended: PromiseOrValue<BigNumberish>,
      primaryUrl: PromiseOrValue<string>,
      tags: PromiseOrValue<string>,
      isPrivate: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
